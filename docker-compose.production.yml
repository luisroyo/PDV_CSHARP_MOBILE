version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: pos_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: pos_multivertical
      POSTGRES_USER: pos_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PosMultiVertical2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/setup-database.sql:/docker-entrypoint-initdb.d/setup-database.sql
      - ./backups:/backups
    networks:
      - pos_network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  redis:
    image: redis:7-alpine
    container_name: pos_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - pos_network
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pos_api_prod
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=pos_multivertical;Username=pos_user;Password=${POSTGRES_PASSWORD:-PosMultiVertical2024!};Port=5432
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=${JWT_SECRET_KEY:-PDV_Multi_Vertical_Super_Secret_Key_2024_Production_At_Least_64_Characters_Long_For_Maximum_Security}
      - Jwt__Issuer=PDV-Multi-Vertical-Production
      - Jwt__Audience=PDV-Users-Production
      - Jwt__ExpirationMinutes=480
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - postgres
      - redis
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: pos_nginx_prod
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - pos_network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  pos_network:
    driver: bridge
